* TODO configure Gremlin Server to use neo4j
** TODO : using both
*** experimental strategy
Enter Bash in the official gserver Dockerfile,
  mounting a folder with useful stuff.
Copy things around.
Try `submitToGremlinServer` until it works.
*** discoveries
**** important folder in Docker image
/opt/gremlin-server/bin/
  gremlin-server.bat
  gremlin-server.conf
  gremlin-server.sh
**** how smsn runs gserver, minus logging
bash /root/gremlin/bin/gremlin-server.sh <place>/gremlin-server-smsn.yaml
*** docker-3/ : what I tried
**** copy, edit smsn config files
in gremlin-server.yaml, delete
  all references to smsn
  the reference to scripts/empty-sample.groovy
in neo4j.properties
  change the graph location to /mnt/data
**** TODO Is it a problem that /mnt/data is empty?
**** make a custom Docker image
it's simple; see docker-3/Dockerfile
**** enter bash in the container as root
docker run --name gremlin -p 8182:8182        \
    -u root                                   \
    -it -v /home/jeff/haskerpop/docker-3:/mnt \
    --entrypoint "/bin/bash"                  \
    tinkerpop/gremlin-server:3.4.2
**** run gremlin-server
My preferred way:
  /opt/gremlin-server/bin/gremlin-server.sh /mnt/config/gremlin-server.yaml

The normal entrypoint does some IP substitution. It doesn't work either.
  /docker-entrypoint.sh /mnt/config/gremlin-server.yaml
** failed: using tinkerpop gremlin-server source
*** DONE clone https://github.com/apache/tinkerpop/
*** DONE use the gremlin-server folder in it
*** add (after modifying) config files from smsn
 Note that the yaml file refers to the properties file.
**** 1) neo4j-smsn.properties
 ~/_stale,pre-2019-07/smsn+/smsn/smsn-server/doc/neo4j-smsn.properties
 It tells Neo4j where to store its data, and configures the store.
**** 2) gremlin-server-smsn.yaml
 ~/_stale,pre-2019-07/smsn+/smsn/smsn-server/doc/gremlin-server-smsn.yaml
   (it's also in docker-smsn)
 It tells Gremlin Server to use the Neo4j graph you configured in (1).
*** infer from the docker-smsn Dockerfile how to use those config files
** failed: using the smsn Dockerfile
* TODO add logging
* important folders and websites
** greskell
~/code/haskell-libs/greskell
https://hackage.haskell.org/package/greskell
** hasbolt
~/code/haskell-libs/hasbolt
https://neo4j.com/developer/haskell/
https://hackage.haskell.org/package/hasbolt
** tinkerpop
~/installs/apache-tinkerpop
https://tinkerpop.apache.org/docs/3.4.2/reference/#gremlin-server
* things I'll need
** read graph from file
** indexing
* from Josh: Q: to expose a graph through Gremlin Server
A: Have a look at:
    1) neo4j-smsn.properties, which tells Neo4j where to store its data, and configures the store
    2) gremlin-server-smsn.yaml, which tells Gremlin Server to use the Neo4j graph you configured in (1)
You can then access the graph through Gremlin Server using an HTTP or a WebSocket client, a la smsn-websocket.el
You can also access the Neo4j graph programmatically, but not while Gremlin Server is also running.
* use neo4j directly for controlling indexes
** all Neo4j asks (lately) is that you specify which indexes to maintain
It doesn't need you to maintain them -- it'll figure that out.
https://neo4j.com/docs/cypher-manual/current/schema/index/
** haskell-neo4j-client seems to provide all (3 of) those operations
https://hackage.haskell.org/package/haskell-neo4j-client-0.3.2.4/docs/Database-Neo4j.html#g:8
** but maybe it can be entirely automatic -- smsn's config file suggests so
*** the neo4j config file that smsn uses
**** ~/_stale,pre-2019-07/smsn+/docker-smsn/neo4j.properties
**** it's four lines
  gremlin.neo4j.directory=/mnt/smsn-data/neo4j # CHANGE ME: this is a permanent directory for your graph data.
  gremlin.graph=org.apache.tinkerpop.gremlin.neo4j.structure.Neo4jGraph
  gremlin.neo4j.conf.node_auto_indexing=true
  gremlin.neo4j.conf.relationship_auto_indexing=true
*** OTOH smsn's code reaches into Neo4j too
~/_stale,pre-2019-07/smsn+/docker-smsn/neo4j.properties
* what I installed
Nothing outside of
  installs/apache-tinkerpop
* creds
** Overleaf
(Josh shared a pdf through this service.)
gmail
gunawqlg8fdaht
** tinkerpop issue tracker
https://issues.apache.org/jira/secure/WelcomeToJIRA.jspa
gmail
jeffbrown
pharoagletmypplgo
* haskell libraries, pros and cons
** for Neo4j
hasbolt is for Neo4j 3.x
haskell-neo4j-client is for Neo4j 2.x
** for Gremlin
according to Josh:
  Greskell is a full traversal language
  Gremlin-Haskell somehow is not that
